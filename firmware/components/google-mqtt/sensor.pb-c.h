/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sensor.proto */

#ifndef PROTOBUF_C_sensor_2eproto__INCLUDED
#define PROTOBUF_C_sensor_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _BMP280Reading BMP280Reading;
typedef struct _SCD30Reading SCD30Reading;
typedef struct _SGP30Reading SGP30Reading;
typedef struct _SMUART04LReading SMUART04LReading;
typedef struct _SensorUpdate SensorUpdate;


/* --- enums --- */


/* --- messages --- */

struct  _BMP280Reading
{
  ProtobufCMessage base;
  protobuf_c_boolean has_temperature;
  float temperature;
  protobuf_c_boolean has_pressure;
  float pressure;
};
#define BMP280_READING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bmp280_reading__descriptor) \
    , 0, 0, 0, 0 }


struct  _SCD30Reading
{
  ProtobufCMessage base;
  protobuf_c_boolean has_temperature;
  float temperature;
  protobuf_c_boolean has_humidity;
  float humidity;
  protobuf_c_boolean has_co2;
  float co2;
};
#define SCD30_READING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scd30_reading__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  _SGP30Reading
{
  ProtobufCMessage base;
  protobuf_c_boolean has_co2;
  uint32_t co2;
  protobuf_c_boolean has_tvoc;
  uint32_t tvoc;
  protobuf_c_boolean has_baseline_co2;
  uint32_t baseline_co2;
  protobuf_c_boolean has_baseline_tvoc;
  uint32_t baseline_tvoc;
  protobuf_c_boolean has_h2;
  uint32_t h2;
  protobuf_c_boolean has_ethanol;
  uint32_t ethanol;
};
#define SGP30_READING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sgp30_reading__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SMUART04LReading
{
  ProtobufCMessage base;
  protobuf_c_boolean has_pm10_smoke;
  uint32_t pm10_smoke;
  protobuf_c_boolean has_pm25_smoke;
  uint32_t pm25_smoke;
  protobuf_c_boolean has_pm100_smoke;
  uint32_t pm100_smoke;
  protobuf_c_boolean has_pm10_env;
  uint32_t pm10_env;
  protobuf_c_boolean has_pm25_env;
  uint32_t pm25_env;
  protobuf_c_boolean has_pm100_env;
  uint32_t pm100_env;
};
#define SMUART04_LREADING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&smuart04_lreading__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _SensorUpdate
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  uint64_t timestamp;
  BMP280Reading *bmp280;
  SCD30Reading *scd30;
  SGP30Reading *sgp30;
  SMUART04LReading *smuart04l;
};
#define SENSOR_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor_update__descriptor) \
    , 0, 0, NULL, NULL, NULL, NULL }


/* BMP280Reading methods */
void   bmp280_reading__init
                     (BMP280Reading         *message);
size_t bmp280_reading__get_packed_size
                     (const BMP280Reading   *message);
size_t bmp280_reading__pack
                     (const BMP280Reading   *message,
                      uint8_t             *out);
size_t bmp280_reading__pack_to_buffer
                     (const BMP280Reading   *message,
                      ProtobufCBuffer     *buffer);
BMP280Reading *
       bmp280_reading__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bmp280_reading__free_unpacked
                     (BMP280Reading *message,
                      ProtobufCAllocator *allocator);
/* SCD30Reading methods */
void   scd30_reading__init
                     (SCD30Reading         *message);
size_t scd30_reading__get_packed_size
                     (const SCD30Reading   *message);
size_t scd30_reading__pack
                     (const SCD30Reading   *message,
                      uint8_t             *out);
size_t scd30_reading__pack_to_buffer
                     (const SCD30Reading   *message,
                      ProtobufCBuffer     *buffer);
SCD30Reading *
       scd30_reading__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scd30_reading__free_unpacked
                     (SCD30Reading *message,
                      ProtobufCAllocator *allocator);
/* SGP30Reading methods */
void   sgp30_reading__init
                     (SGP30Reading         *message);
size_t sgp30_reading__get_packed_size
                     (const SGP30Reading   *message);
size_t sgp30_reading__pack
                     (const SGP30Reading   *message,
                      uint8_t             *out);
size_t sgp30_reading__pack_to_buffer
                     (const SGP30Reading   *message,
                      ProtobufCBuffer     *buffer);
SGP30Reading *
       sgp30_reading__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sgp30_reading__free_unpacked
                     (SGP30Reading *message,
                      ProtobufCAllocator *allocator);
/* SMUART04LReading methods */
void   smuart04_lreading__init
                     (SMUART04LReading         *message);
size_t smuart04_lreading__get_packed_size
                     (const SMUART04LReading   *message);
size_t smuart04_lreading__pack
                     (const SMUART04LReading   *message,
                      uint8_t             *out);
size_t smuart04_lreading__pack_to_buffer
                     (const SMUART04LReading   *message,
                      ProtobufCBuffer     *buffer);
SMUART04LReading *
       smuart04_lreading__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   smuart04_lreading__free_unpacked
                     (SMUART04LReading *message,
                      ProtobufCAllocator *allocator);
/* SensorUpdate methods */
void   sensor_update__init
                     (SensorUpdate         *message);
size_t sensor_update__get_packed_size
                     (const SensorUpdate   *message);
size_t sensor_update__pack
                     (const SensorUpdate   *message,
                      uint8_t             *out);
size_t sensor_update__pack_to_buffer
                     (const SensorUpdate   *message,
                      ProtobufCBuffer     *buffer);
SensorUpdate *
       sensor_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor_update__free_unpacked
                     (SensorUpdate *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BMP280Reading_Closure)
                 (const BMP280Reading *message,
                  void *closure_data);
typedef void (*SCD30Reading_Closure)
                 (const SCD30Reading *message,
                  void *closure_data);
typedef void (*SGP30Reading_Closure)
                 (const SGP30Reading *message,
                  void *closure_data);
typedef void (*SMUART04LReading_Closure)
                 (const SMUART04LReading *message,
                  void *closure_data);
typedef void (*SensorUpdate_Closure)
                 (const SensorUpdate *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor bmp280_reading__descriptor;
extern const ProtobufCMessageDescriptor scd30_reading__descriptor;
extern const ProtobufCMessageDescriptor sgp30_reading__descriptor;
extern const ProtobufCMessageDescriptor smuart04_lreading__descriptor;
extern const ProtobufCMessageDescriptor sensor_update__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sensor_2eproto__INCLUDED */
